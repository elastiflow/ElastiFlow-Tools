#!/bin/bash

# Version: 1.01

elastiflow_flowcoll_version="7.1.1"
elastiflow_snmpcoll_version="7.1.1"
flowcoll_config_path="/etc/elastiflow/flowcoll.yml"
snmpcoll_config_path="/etc/elastiflow/snmpcoll.yml"
########################################################

#leave blank
osversion=""

# Colors for messages
BLUE='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

print_message() {
  local message=$1
  local color=$2
  echo -e "${color}${message}${NC}"
}

display_ascii_art() {
  echo -e "${BLUE}@@@@@@@@@@@@@@ @@@@@                                @@@@     @@@@  @@@@@@@@@@@@@@@ @@@@"
  echo "@@@@@@@@@@@@@  @@@@@                               @@@@@     @@@@  @@@@@@@@@@@@@@  @@@@"
  echo "@@@@           @@@@@     @@@@@@        @@@@@@    @@@@@@@@@@  @@@@  @@@@@           @@@@     @@@@@@@@   @@@@     @@@@     @@@@"
  echo "@@@@           @@@@@  @@@@@@@@@@@@  @@@@@@@@@@@@ @@@@@@@@@@        @@@@@           @@@@   @@@@@@@@@@@  @@@@@    @@@@@    @@@@"
  echo "@@@@@@@@@@     @@@@@ @@@@@@  @@@@@  @@@@@  @@@@@@@@@@@@@@@   @@@@  @@@@@@@@@@@     @@@@  @@@@@@@@@@@@@@ @@@@   @@@@@@   @@@@@"
  echo "@@@@@@@@@      @@@@@          @@@@@ @@@@@@@@       @@@@@     @@@@  @@@@@@@@@@      @@@@ @@@@@     @@@@@ @@@@   @@@@@@@  @@@@"
  echo "@@@@@@@@       @@@@@  @@@@@@@@@@@@@ @@@@@@@@@@@@   @@@@@     @@@@  @@@@@@@@        @@@@ @@@@@      @@@@  @@@@ @@@@ @@@ @@@@@"
  echo "@@@@           @@@@@ @@@@@@@@@@@@@@    @@@@@@@@@@  @@@@@     @@@@  @@@@@           @@@@ @@@@@     @@@@@  @@@@ @@@  @@@@@@@@"
  echo "@@@@@@@@@@@@@@ @@@@@ @@@@    @@@@@@@@@@@    @@@@@  @@@@@@    @@@@  @@@@@           @@@@ @@@@@@   @@@@@@   @@@@@@@   @@@@@@@"
  echo "@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@ @@@@@@@@@@@@    @@@@@@@  @@@@  @@@@@           @@@@  @@@@@@@@@@@@@    @@@@@@    @@@@@@"
  echo "@@@@@@@@@@@@@  @@@@@  @@@@@@@ @@@@@  @@@@@@@@@@      @@@@@@  @@@@  @@@@@           @@@@    @@@@@@@@@       @@@@@     @@@@@${NC}"
}

show_maxmind() {
  print_message "** Configure MaxMind Enrichment **" "$GREEN"
  print_message "Obtain Maxmind license key from: https://www.maxmind.com/en/geolite2/signup" "$GREEN"
  print_message "Log in to Maxmind.com, click 'My Account', and then 'Manage License Keys'" "$GREEN"
  print_message "**********************************" "$GREEN"
}

comment_and_replace_line() {
  local FILE=$1
  local FIND=$2
  local REPLACE=$3
  FIND_ESCAPED=$(echo "$FIND" | sed 's/[.[\*^$]/\\&/g')
  REPLACE_ESCAPED=$(echo "$REPLACE" | sed 's/[&/\]/\\&/g')

  if grep -Eq "^[#]*$FIND_ESCAPED" "$FILE"; then
    sed -i.bak "/^[#]*$FIND_ESCAPED/c\\$REPLACE" "$FILE"
    print_message "Replaced '$FIND' with '$REPLACE'." "$GREEN"
  else
    if grep -q "^#ElastiFlow PoC Configurator" "$FILE"; then
      sed -i.bak "/^#ElastiFlow PoC Configurator/a $REPLACE" "$FILE"
      print_message "Added '$REPLACE' under '#ElastiFlow PoC Configurator'." "$GREEN"
    else
      echo -e "\n#ElastiFlow PoC Configurator" | tee -a "$FILE" > /dev/null
      sed -i.bak "/^#ElastiFlow PoC Configurator/a $REPLACE" "$FILE"
      print_message "Added heading and '$REPLACE'." "$GREEN"
    fi
  fi
}

check_for_updates() {
  # Dynamically determine the path to the current script
  local current_script=$(realpath "$0")
  local new_script_url="https://raw.githubusercontent.com/elastiflow/ElastiFlow-Tools/main/elastiflow_installation_scripts/ubuntu_flowcoll_snmpcoll_installation_script"
  local tmp_script="/tmp/install"

  echo "Checking for updates..."
  echo "Current script path: $current_script"

  wget -q -O "$tmp_script" "$new_script_url"

  if [[ $? -ne 0 ]]; then
    print_message "Failed to check for updates." "$RED"
    return
  fi

  echo "Downloaded new script to $tmp_script."

  local new_version=$(grep -m 1 '^# Version: ' "$tmp_script" | awk '{print $3}')
  local current_version=$(grep -m 1 '^# Version: ' "$current_script" | awk '{print $3}')

  echo "Current version: $current_version"
  echo "Remote version: $new_version"

  if [[ -z "$current_version" ]]; then
    print_message "Failed to detect the current version." "$RED"
    return
  fi

  if [[ "$new_version" > "$current_version" ]]; then
    print_message "Remote version $new_version available." "$GREEN"
    
    while true; do
      echo -n "Do you want to update to the Remote version? (y/n) [y]: "
      for i in {10..1}; do
        echo -n "$i "
        sleep 1
      done
      echo
      
      read -t 1 -n 1 update_choice
      update_choice=${update_choice:-y}
      
      if [[ $update_choice == "y" || $update_choice == "n" ]]; then
        break
      else
        echo "Invalid input. Please enter 'y' or 'n'."
      fi
    done

    if [[ $update_choice == "y" ]]; then
      print_message "Updating to version $new_version..." "$GREEN"
      cp "$tmp_script" "$current_script"
      chmod +x "$current_script"
      print_message "Update successful. Restarting script..." "$GREEN"
      exec "$current_script"
    else
      print_message "Update skipped." "$RED"
    fi
  else
    print_message "No updates available." "$GREEN"
  fi

  echo "Cleaning up temporary script."
  rm -f "$tmp_script"
}

find_and_replace() {
  local FILE=$1
  shift
  local PAIRS=("$@")
  if [ ! -f "$FILE" ]; then
    print_message "File not found!" "$RED"
    exit 1
  fi
  for ((i = 0; i < ${#PAIRS[@]}; i+=2)); do
    comment_and_replace_line "$FILE" "${PAIRS[i]}" "${PAIRS[i+1]}"
  done
}

handle_error() {
  local error_msg="$1"
  local line_num="$2"
  echo "Error at line $line_num: $error_msg"
  while true; do
    read -p "Do you wish to retry? (yes/no): " user_decision
    if [[ "$user_decision" =~ ^[Yy][Ee][Ss]?$ ]]; then
      return 1
    elif [[ "$user_decision" =~ ^[Nn][Oo]?$ ]]; then
      echo "Exiting..."
      exit 1
    else
      echo "Invalid input. Please enter 'yes' or 'no'."
    fi
  done
}

replace_text() {
  local file_path="$1"
  local old_text="$2"
  local new_text="$3"
  local line_num="$4"
  sed -i.bak "s|$old_text|$new_text|g" "$file_path" || handle_error "Failed to replace text in $file_path." "$line_num"
}

check_for_root() {
  if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" 1>&2
    exit 1
  fi
}

check_compatibility() {
  . /etc/os-release
  ID_LOWER=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
  if [[ "$ID_LOWER" != "ubuntu" ]]; then
    echo "This script only supports Ubuntu" 1>&2
    exit 1
  fi
  osversion="ubuntu"
}

# Function to prompt for Elasticsearch connection information
prompt_elasticsearch_connection() {
  while true; do
    read -p "Enter Elasticsearch IP: " elasticsearch_ip
    read -p "Enter Elasticsearch Port (default 9200): " elasticsearch_port
    elasticsearch_port=${elasticsearch_port:-9200}
    read -p "Enter Elasticsearch Protocol (http/https, default http): " elasticsearch_protocol
    elasticsearch_protocol=${elasticsearch_protocol:-http}
    read -p "Enter Elasticsearch Password: " elasticsearch_password

    while true; do
      read -p "Do you want to test the Elasticsearch connection? (yes/no): " test_es_connection
      if [[ "$test_es_connection" =~ ^[Yy]([Ee][Ss])?$ ]]; then
        if verify_elasticsearch "$elasticsearch_protocol" "$elasticsearch_ip" "$elasticsearch_port" "$elasticsearch_password"; then
          echo "Elasticsearch verification successful."
          break 2
        else
          echo "Elasticsearch verification failed. Please check your inputs and try again."
        fi
      elif [[ "$test_es_connection" =~ ^[Nn]([Oo])?$ ]]; then
        echo "Skipping Elasticsearch connection test."
        break 2
      else
        echo "Please answer yes or no."
      fi
    done
  done

  read -p "Enable Elasticsearch ECS (true/false, default false): " elasticsearch_ecs_enable
  elasticsearch_ecs_enable=${elasticsearch_ecs_enable:-false}
  read -p "Enable Elasticsearch TLS (true/false, default true): " elasticsearch_tls_enable
  elasticsearch_tls_enable=${elasticsearch_tls_enable:-true}
  read -p "Skip Elasticsearch TLS Verification (true/false, default true): " elasticsearch_tls_skip_verification
  elasticsearch_tls_skip_verification=${elasticsearch_tls_skip_verification:-true}
}

install_prerequisites_flowcoll() {
  printf "\n\n\n*********Installing prerequisites for ElastiFlow Flow Collector...\n\n"

  echo "Updating package list..."
  apt-get -qq update > /dev/null 2>&1

  # List of packages to be installed
  packages=(jq net-tools git bc gpg curl wget unzip apt-transport-https libpcap-dev)

  # Loop through the list and install each package
  for package in "${packages[@]}"; do
    echo "Installing $package..."
    apt-get -qq install -y "$package" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "$package installed successfully."
    else
      echo "Failed to install $package."
    fi
  done
}

install_prerequisites_snmpcoll() {
  printf "\n\n\n*********Installing prerequisites for ElastiFlow SNMP Collector...\n\n"

  echo "Updating package list..."
  apt-get -qq update > /dev/null 2>&1

  # List of packages to be installed
  packages=(snmp snmpd snmp-mibs-downloader jq net-tools git bc gpg curl wget unzip apt-transport-https libpcap-dev)

  # Loop through the list and install each package
  for package in "${packages[@]}"; do
    echo "Installing $package..."
    apt-get -qq install -y "$package" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "$package installed successfully."
    else
      echo "Failed to install $package."
    fi
  done
}

# Function to check the service health
check_service_health() {
  local service_name=$1
  print_message "Checking if ${service_name} stays running for at least 10 seconds..." "$GREEN"
  sleep 10
  if ! systemctl is-active --quiet "$service_name"; then
    print_message "${service_name} did not stay started." "$RED"
    if journalctl -u "$service_name" | grep -q "license error"; then
      print_message "License error found in logs. Exiting to main menu." "$RED"
    else
      print_message "Rerunning the configuration routine." "$GREEN"
    fi
    return 1
  else
    print_message "${service_name} restarted successfully and stayed running for at least 10 seconds." "$GREEN"
    return 0
  fi
}

# Function to install ElastiFlow Flow Collector
install_elastiflow_flowcoll() {
  local downloaded=false
  local file_path="flow-collector_${elastiflow_flowcoll_version}_linux_amd64.deb"

  while ! $downloaded; do
    printf "\n\n\n*********Downloading and installing ElastiFlow Flow Collector...\n\n"
    wget -O $file_path https://elastiflow-releases.s3.us-east-2.amazonaws.com/flow-collector/flow-collector_"$elastiflow_flowcoll_version"_linux_amd64.deb
    
    if [[ $? -eq 0 ]]; then
      print_message "Download successful." "$GREEN"
      apt-get -q install ./$file_path
      downloaded=true
    else
      print_message "Failed to download ElastiFlow Flow Collector." "$RED"
      read -p "Do you want to retry the download or specify the location of the downloaded file? (retry/specify/quit): " user_decision
      if [[ "$user_decision" == "specify" ]]; then
        read -p "Enter the full path to the downloaded file: " specified_path
        if [[ -f "$specified_path" ]]; then
          file_path=$specified_path
          apt-get -q install ./$file_path
          downloaded=true
        else
          print_message "Specified file not found." "$RED"
        fi
      elif [[ "$user_decision" == "quit" ]]; then
        exit 1
      fi
    fi
  done
}

# Function to install ElastiFlow SNMP Collector
install_elastiflow_snmpcoll() {
  local downloaded=false
  local file_path="elastiflow-snmpcollector.deb"

  while ! $downloaded; do
    printf "\n\n\n*********Downloading and installing ElastiFlow SNMP Collector...\n\n"
    wget -q -O $file_path "https://elastiflow-releases.s3.us-east-2.amazonaws.com/snmp-collector/snmp-collector_${elastiflow_snmpcoll_version}_linux_amd64.deb"
    
    if [[ $? -eq 0 ]]; then
      print_message "Download successful." "$GREEN"
      dpkg -i $file_path
      downloaded=true
    else
      print_message "Failed to download ElastiFlow SNMP Collector." "$RED"
      read -p "Do you want to retry the download or specify the location of the downloaded file? (retry/specify/quit): " user_decision
      if [[ "$user_decision" == "specify" ]]; then
        read -p "Enter the full path to the downloaded file: " specified_path
        if [[ -f "$specified_path" ]]; then
          file_path=$specified_path
          dpkg -i $file_path
          downloaded=true
        else
          print_message "Specified file not found." "$RED"
        fi
      elif [[ "$user_decision" == "quit" ]]; then
        exit 1
      fi
    fi
  done
}

# Function to verify Elasticsearch connection
verify_elasticsearch() {
  local protocol=$1
  local ip=$2
  local port=$3
  local password=$4
  local response=$(curl -s -o /dev/null -w "%{http_code}" -u "elastic:${password}" "${protocol}://${ip}:${port}")
  if [ "$response" -eq 200 ]; then
    return 0
  else
    return 1
  fi
}

# Function to configure ElastiFlow Flow Collector
configure_elastiflow_flowcoll() {
  while true; do
    read -p "Do you accept the ElastiFlow license? (yes/no): " elastiflow_license_acceptance
    if [[ "$elastiflow_license_acceptance" == "yes" ]]; then
      elastiflow_license_accepted="true"
      break
    elif [[ "$elastiflow_license_acceptance" == "no" ]]; then
      echo "You must accept the license to proceed with the installation."
      exit 1
    else
      echo "Please answer yes or no."
    fi
  done

  read -p "Enter ElastiFlow Account ID: " elastiflow_account_id
  read -p "Enter ElastiFlow Flow License Key: " elastiflow_flow_license_key

  prompt_elasticsearch_connection

  elastiflow_config_strings=(
    "EF_LICENSE_ACCEPTED" "EF_LICENSE_ACCEPTED: \"${elastiflow_license_accepted}\""
    "EF_ACCOUNT_ID" "EF_ACCOUNT_ID: \"${elastiflow_account_id}\""
    "EF_FLOW_LICENSE_KEY" "EF_FLOW_LICENSE_KEY: \"${elastiflow_flow_license_key}\""
    "EF_OUTPUT_ELASTICSEARCH_ENABLE" "EF_OUTPUT_ELASTICSEARCH_ENABLE: \"true\""
    "EF_OUTPUT_ELASTICSEARCH_ADDRESSES" "EF_OUTPUT_ELASTICSEARCH_ADDRESSES: \"${elasticsearch_ip}:${elasticsearch_port}\""
    "EF_OUTPUT_ELASTICSEARCH_ECS_ENABLE" "EF_OUTPUT_ELASTICSEARCH_ECS_ENABLE: \"${elasticsearch_ecs_enable}\""
    "EF_OUTPUT_ELASTICSEARCH_PASSWORD" "EF_OUTPUT_ELASTICSEARCH_PASSWORD: '${elasticsearch_password}'"
    "EF_OUTPUT_ELASTICSEARCH_TLS_ENABLE" "EF_OUTPUT_ELASTICSEARCH_TLS_ENABLE: \"${elasticsearch_tls_enable}\""
    "EF_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION" "EF_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION: \"${elasticsearch_tls_skip_verification}\""
    "EF_FLOW_SERVER_UDP_IP" "EF_FLOW_SERVER_UDP_IP: \"0.0.0.0\""
    "EF_FLOW_SERVER_UDP_PORT" "EF_FLOW_SERVER_UDP_PORT: \"2055,4739,6343,9995\""
    "EF_FLOW_SERVER_UDP_READ_BUFFER_MAX_SIZE" "EF_FLOW_SERVER_UDP_READ_BUFFER_MAX_SIZE: \"33554432\""
    "EF_PROCESSOR_DECODE_IPFIX_ENABLE" "EF_PROCESSOR_DECODE_IPFIX_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_MAX_RECORDS_PER_PACKET" "EF_PROCESSOR_DECODE_MAX_RECORDS_PER_PACKET: \"64\""
    "EF_PROCESSOR_DECODE_NETFLOW1_ENABLE" "EF_PROCESSOR_DECODE_NETFLOW1_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_NETFLOW5_ENABLE" "EF_PROCESSOR_DECODE_NETFLOW5_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_NETFLOW6_ENABLE" "EF_PROCESSOR_DECODE_NETFLOW6_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_NETFLOW7_ENABLE" "EF_PROCESSOR_DECODE_NETFLOW7_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_NETFLOW9_ENABLE" "EF_PROCESSOR_DECODE_NETFLOW9_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_SFLOW5_ENABLE" "EF_PROCESSOR_DECODE_SFLOW5_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_SFLOW_COUNTERS_ENABLE" "EF_PROCESSOR_DECODE_SFLOW_COUNTERS_ENABLE: \"true\""
    "EF_PROCESSOR_DECODE_SFLOW_FLOWS_ENABLE" "EF_PROCESSOR_DECODE_SFLOW_FLOWS_ENABLE: \"true\""
    "EF_PROCESSOR_ENRICH_IPADDR_DNS_ENABLE" "EF_PROCESSOR_ENRICH_IPADDR_DNS_ENABLE: \"${dns_enrichment}\""
    "EF_PROCESSOR_ENRICH_IPADDR_NETINTEL_ENABLE" "EF_PROCESSOR_ENRICH_IPADDR_NETINTEL_ENABLE: \"true\""
    "EF_LOGGER_FILE_LOG_ENABLE" "EF_LOGGER_FILE_LOG_ENABLE: \"${enable_log_file}\""
    "EF_OUTPUT_ELASTICSEARCH_TSDS_ENABLE" "EF_OUTPUT_ELASTICSEARCH_TSDS_ENABLE: \"${tsds_enable}\""
  )

  printf "\n\n\n*********Configuring ElastiFlow Flow Collector...\n\n" 
  find_and_replace "$flowcoll_config_path" "${elastiflow_config_strings[@]}"
  replace_text "/etc/systemd/system/flowcoll.service" "TimeoutStopSec=infinity" "TimeoutStopSec=60" "N/A"
  configure_maxmind  
  printf "\n\n\n*********Enabling and starting ElastiFlow service...\n\n"
  systemctl daemon-reload && systemctl enable flowcoll.service && systemctl start flowcoll.service

  check_service_health flowcoll.service
  if [ $? -ne 0 ]; then
    configure_elastiflow_flowcoll
  fi
}

# Function to configure ElastiFlow SNMP Collector
configure_elastiflow_snmpcoll() {
  while true; do
    read -p "Do you accept the ElastiFlow license? (yes/no): " elastiflow_license_acceptance
    if [[ "$elastiflow_license_acceptance" == "yes" ]]; then
      elastiflow_license_accepted="true"
      break
    elif [[ "$elastiflow_license_acceptance" == "no" ]]; then
      echo "You must accept the license to proceed with the installation."
      exit 1
    else
      echo "Please answer yes or no."
    fi
  done

  read -p "Enter ElastiFlow Account ID: " elastiflow_account_id
  read -p "Enter ElastiFlow SNMP License Key: " elastiflow_snmp_license_key

  prompt_elasticsearch_connection

  elastiflow_config_strings=(
    "EF_LICENSE_ACCEPTED" "EF_LICENSE_ACCEPTED: \"${elastiflow_license_accepted}\""
    "EF_ACCOUNT_ID" "EF_ACCOUNT_ID: \"${elastiflow_account_id}\""
    "EF_SNMP_LICENSE_KEY" "EF_SNMP_LICENSE_KEY: \"${elastiflow_snmp_license_key}\""
    "EF_OUTPUT_ELASTICSEARCH_ENABLE" "EF_OUTPUT_ELASTICSEARCH_ENABLE: \"true\""
    "EF_OUTPUT_ELASTICSEARCH_ADDRESSES" "EF_OUTPUT_ELASTICSEARCH_ADDRESSES: \"${elasticsearch_ip}:${elasticsearch_port}\""
    "EF_OUTPUT_ELASTICSEARCH_ECS_ENABLE" "EF_OUTPUT_ELASTICSEARCH_ECS_ENABLE: \"${elasticsearch_ecs_enable}\""
    "EF_OUTPUT_ELASTICSEARCH_PASSWORD" "EF_OUTPUT_ELASTICSEARCH_PASSWORD: '${elasticsearch_password}'"
    "EF_OUTPUT_ELASTICSEARCH_TLS_ENABLE" "EF_OUTPUT_ELASTICSEARCH_TLS_ENABLE: \"${elasticsearch_tls_enable}\""
    "EF_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION" "EF_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION: \"${elasticsearch_tls_skip_verification}\""
  )

  printf "\n\n\n*********Configuring ElastiFlow SNMP Collector...\n\n" 
  find_and_replace "$snmpcoll_config_path" "${elastiflow_config_strings[@]}"
  replace_text "/etc/systemd/system/snmpcoll.service" "TimeoutStopSec=infinity" "TimeoutStopSec=60" "N/A"
  printf "\n\n\n*********Enabling and starting ElastiFlow SNMP service...\n\n"
  systemctl daemon-reload && systemctl enable snmpcoll.service && systemctl start snmpcoll.service

  check_service_health snmpcoll.service
  if [ $? -ne 0 ]; then
    configure_elastiflow_snmpcoll
  fi
}

configure_maxmind() {
  FILE_PATH=/etc/elastiflow/flowcoll.yml
  show_maxmind

  read -p "Do you want to enable GeoIP enrichment? (yes/no): " enable_geoip
  if [[ "$enable_geoip" != "yes" ]]; then
    print_message "GeoIP enrichment will not be enabled." "$RED"
    return
  fi

  read -p "Enter your MaxMind license key (or 'q' to quit): " maxmind_license_key
  if [[ $maxmind_license_key == "q" ]]; then
    return
  fi

  mkdir -p /etc/elastiflow/maxmind/

  asn_download_success=false
  geoip_download_success=false

  if wget -O ./Geolite2-ASN.tar.gz "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=$maxmind_license_key&suffix=tar.gz"; then
    tar -xvzf Geolite2-ASN.tar.gz --strip-components 1 -C /etc/elastiflow/maxmind/
    rm -f ./Geolite2-ASN.tar.gz
    print_message "MaxMind ASN database downloaded and extracted successfully." "$GREEN"
    asn_download_success=true
  else
    print_message "Failed to download MaxMind ASN database." "$RED"
  fi

  if wget -O ./Geolite2-City.tar.gz "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$maxmind_license_key&suffix=tar.gz"; then
    tar -xvzf Geolite2-City.tar.gz --strip-components 1 -C /etc/elastiflow/maxmind/
    rm -f ./Geolite2-City.tar.gz
    print_message "MaxMind GeoIP City database downloaded and extracted successfully." "$GREEN"
    geoip_download_success=true
  else
    print_message "Failed to download MaxMind GeoIP City database." "$RED"
  fi

  STRINGS_TO_REPLACE=(
    "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_ENABLE" "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_ENABLE: \"true\""
    "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_PATH" "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_PATH: \"/etc/elastiflow/maxmind/GeoLite2-ASN.mmdb\""
    "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_ENABLE" "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_ENABLE: \"true\""
    "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_PATH" "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_PATH: \"/etc/elastiflow/maxmind/GeoLite2-City.mmdb\""
    "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_VALUES" "EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_VALUES: city,country,country_code,location,timezone"
  )

  find_and_replace "$FILE_PATH" "${STRINGS_TO_REPLACE[@]}"
}

# Main script
check_for_updates
display_ascii_art
check_for_root
check_compatibility

read -p "Do you want to install ElastiFlow Flow Collector? (yes/no): " install_flowcoll
if [[ "$install_flowcoll" == "yes" ]]; then
  install_prerequisites_flowcoll
  install_elastiflow_flowcoll
  configure_elastiflow_flowcoll
fi

read -p "Do you want to install ElastiFlow SNMP Collector? (yes/no): " install_snmpcoll
if [[ "$install_snmpcoll" == "yes" ]]; then
  install_prerequisites_snmpcoll
  install_elastiflow_snmpcoll
  configure_elastiflow_snmpcoll
fi

echo -e "\n\n********* Service Status *********"
systemctl status flowcoll.service | head -n 10
systemctl status snmpcoll.service | head -n 10

echo -e "******************************"
echo -e "\nInstallation complete."
echo -e "\nFor advanced configuration, edit /etc/elastiflow/flowcoll.yml and /etc/elastiflow/snmpcoll.yml"
